---
name: ci-cd

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  KUSTOMIZE_DIR: environments/production

jobs:
  validate:
    name: Validate Kubernetes manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.1.0'

      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.3/kubeconform-linux-amd64.tar.gz \
            | sudo tar -xz -C /usr/local/bin kubeconform

      - name: Render kustomize manifests
        run: kustomize build "$KUSTOMIZE_DIR" > manifest.yaml

      - name: Ensure manifest has document start
        run: |
          if [ -s manifest.yaml ] && ! head -n 1 manifest.yaml | grep -q '^---'; then
            sed -i '1i ---' manifest.yaml
          fi

      - name: Validate manifests with kubeconform
        run: kubeconform -strict -ignore-missing-schemas -summary manifest.yaml

      - name: Lint YAML
        uses: ibiqlik/action-yamllint@v3
        with:
          config_data: |
            extends: default
            rules:
              line-length:
                max: 160
                level: warning
              indentation:
                indent-sequences: whatever

  build-and-push:
    name: Build and push container images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        run: |
          set -euo pipefail
          IMAGES_BUILT=false
          for component in frontend backend; do
            DOCKERFILE="$component/Dockerfile"
            if [ -f "$DOCKERFILE" ]; then
              IMAGE_NAME="${{ env.REGISTRY }}/${{ github.event.repository.name }}-$component"
              echo "Building $IMAGE_NAME from $DOCKERFILE"
              docker build "$component" \
                --tag "$IMAGE_NAME:${{ github.sha }}" \
                --tag "$IMAGE_NAME:latest"
              docker push "$IMAGE_NAME:${{ github.sha }}"
              docker push "$IMAGE_NAME:latest"
              IMAGES_BUILT=true
            else
              echo "Skipping $component, Dockerfile not found at $DOCKERFILE"
            fi
          done
          echo "IMAGES_BUILT=$IMAGES_BUILT" >> $GITHUB_ENV

      - name: Ensure kustomize is available
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.1.0'

      - name: Bump images in production overlay
        run: |
          IMAGE_FRONT="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend"
          IMAGE_BACK="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend"
          TAG="${{ github.sha }}"
          cd environments/production
          # выставляем теги через kustomize (добавит строки, если их не было)
          kustomize edit set image "${IMAGE_FRONT}=${IMAGE_FRONT}:${TAG}"
          kustomize edit set image "${IMAGE_BACK}=${IMAGE_BACK}:${TAG}"

      - name: Create PR with image bumps
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(prod): bump images to ${{ github.sha }}"
          title: "chore(prod): bump images to ${{ github.sha }}"
          branch: "chore/bump-${{ github.sha }}"
          labels: "deploy"
          body: "Bump images in production overlay to `${{ github.sha }}`."
