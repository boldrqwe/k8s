---
name: ci-cd

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  KUSTOMIZE_DIR: environments/production

jobs:
  validate:
    name: Validate Kubernetes manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.1.0'

      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.3/kubeconform-linux-amd64.tar.gz \
            | sudo tar -xz -C /usr/local/bin kubeconform

      - name: Render kustomize manifests
        run: kustomize build "$KUSTOMIZE_DIR" > manifest.yaml

      - name: Ensure manifest has document start
        run: |
          if [ -s manifest.yaml ] && ! head -n 1 manifest.yaml | grep -q '^---'; then
            sed -i '1i ---' manifest.yaml
          fi

      - name: Validate manifests with kubeconform
        run: kubeconform -strict -ignore-missing-schemas -summary manifest.yaml

      - name: Lint YAML
        uses: ibiqlik/action-yamllint@v3
        with:
          config_data: |
            extends: default
            rules:
              line-length:
                max: 160
                level: warning
              indentation:
                indent-sequences: whatever

  build-and-push:
    name: Build and push container images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        if: hashFiles(format('{0}/Dockerfile', matrix.component)) != ''
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.event.repository.name }}-${{ matrix.component }}"
          docker build ${{ matrix.component }} \
            --tag "$IMAGE_NAME:${{ github.sha }}" \
            --tag "$IMAGE_NAME:latest"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Push image
        if: env.IMAGE_NAME != ''
        run: |
          docker push "$IMAGE_NAME:${{ github.sha }}"
          docker push "$IMAGE_NAME:latest"

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - validate
      - build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.1.0'

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.27.3'

      - name: Configure kubeconfig
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          if [ -z "$KUBECONFIG_B64" ]; then
            echo "KUBECONFIG_B64 secret is not configured" >&2
            exit 1
          fi
          echo "$KUBECONFIG_B64" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Render manifests
        run: kustomize build "$KUSTOMIZE_DIR" > manifest.yaml

      - name: Ensure manifest has document start
        run: |
          if [ -s manifest.yaml ] && ! head -n 1 manifest.yaml | grep -q '^---'; then
            sed -i '1i ---' manifest.yaml
          fi

      - name: Apply manifests
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: kubectl apply -f manifest.yaml

      - name: Verify rollout status
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          kubectl rollout status deployment/frontend -n app --timeout=120s
          kubectl rollout status deployment/backend -n app --timeout=120s
          kubectl rollout status statefulset/postgres -n data --timeout=300s
          kubectl rollout status statefulset/kafka -n streaming --timeout=300s
          kubectl rollout status statefulset/opensearch -n data --timeout=300s
