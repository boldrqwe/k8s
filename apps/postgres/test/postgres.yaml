---
# NetworkPolicy
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: postgres-test-postgresql        # <== test вместо prod
  namespace: "test"                     # <== namespace test
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: postgres-test
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-test-postgresql
  namespace: "test"
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgres-test
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-test-postgresql
  namespace: "test"
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
automountServiceAccountToken: false
---
# Service (headless)
apiVersion: v1
kind: Service
metadata:
  name: postgres-test-postgresql-hl
  namespace: "test"
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Service (normal)
apiVersion: v1
kind: Service
metadata:
  name: postgres-test-postgresql
  namespace: "test"
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-test-postgresql
  namespace: "test"
  labels:
    app.kubernetes.io/instance: postgres-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.6.0
    helm.sh/chart: postgresql-16.7.27
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: postgres-test-postgresql-hl
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgres-test
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgres-test-postgresql
      labels:
        app.kubernetes.io/instance: postgres-test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 17.6.0
        helm.sh/chart: postgresql-16.7.27
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: postgres-test-postgresql
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.6.0-debian-12-r4
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "app"
            - name: POSTGRES_DATABASE
              value: "appdb"
            - name: POSTGRES_PASSWORD_FILE
              value: /opt/bitnami/postgresql/secrets/password
            - name: POSTGRES_POSTGRES_PASSWORD_FILE
              value: /opt/bitnami/postgresql/secrets/postgres-password
          volumeMounts:
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: postgresql-password
          secret:
            secretName: app-postgres-test   # <== секрет для test
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"                 # для теста можно меньше
